@page "/"
@using IotHubResources.Models
@using MainAppIotHub.ViewModels
@inject HomeViewModel viewModel

<div id="devices-container" class="container">
  
    <h3 class="headline">DEVICES</h3>

    <div class="devices">

        @if(Devices != null)
        {
            foreach (var device in Devices)
            {
                var icon = device?.DeviceType?.ToLower() switch
                {
                    "lamp" => "fa-regular fa-lightbulb",
                    _ => "fa-solid fa-microchip"
                };               

                <div id="@device!.DeviceId" class="device @(device.DeviceState ? "active" : null)">

                    <div class="body">
                        <i class="@icon"></i>
                        <div class="title">@device.DeviceType</div>
                        @* // Kanske lägg till en helper klass? *@
                        <div class="state">@(device.ConnectionState ? "Connected" : "Connecting...")</div>
                    </div>

                    <footer>
                        <label class="switch">               
                            <InputCheckbox @bind-Value="device.DeviceState" @onclick="() => viewModel.OnDeviceStateChanged(device)" disabled="@(device.ConnectionState == false)" />
                            <span class="slider round"></span>
                        </label>
                    </footer>

                </div>
            }
        }
        else
        {
            <div class="preloader">
                <i class="fa-solid fa-spinner"></i>
            </div>
        }

    </div>
</div>

@code{
    private IEnumerable<IotDevice> Devices = [];

    protected override async Task OnInitializedAsync()
    {
        Devices = await viewModel.GetDevicesAsync();
        viewModel.Timer = new Timer(async _ => await SetDevicesAsync(), null, 0, viewModel.TimerInterval);
    }

    private async Task SetDevicesAsync()
    {
        Devices = await viewModel.GetDevicesAsync();
        await InvokeAsync(StateHasChanged);
    }
}
