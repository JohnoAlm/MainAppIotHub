@page "/"
@using IotHubResources.Models
@using MainAppIotHub.ViewModels
@inject HomeViewModel viewModel
@inject NavigationManager navigation

<div id="devices-container" class="container">
  
    <h3 class="headline"><i class="fa-solid fa-microchip"></i> | DEVICES</h3>
    @if (isInitialized)
    {
        <div class="devices">

            @if (Devices != null)
            {
                foreach (var device in Devices)
                {
                    var icon = device?.DeviceType?.ToLower() switch
                    {
                        "lamp" => "fa-regular fa-lightbulb",
                        _ => "fa-solid fa-microchip"
                    };

                    <div id="@device!.DeviceId" class="device @(device.DeviceState ? "active" : null)">

                        <div class="header">
                            <button class="details-btn" @onclick="() => NavigateToDeviceDetails(device.DeviceId)"><i class="fa-solid fa-circle-info"></i></button>
                        </div>

                        <div class="body">
                            <i class="@icon"></i>
                            <div class="title">@device.DeviceName</div>
                            <div class="type">@device.DeviceType</div>

                            <div class="state">@(device.ConnectionState ? "Connected" : "Connecting...")</div>
                        </div>

                        <footer>
                            <label class="switch">
                                <InputCheckbox @bind-Value="device.DeviceState" @onclick="() => viewModel.OnDeviceStateChanged(device)" disabled="@(device.ConnectionState == false)" />
                                <span class="slider round"></span>
                            </label>
                        </footer>

                    </div>
                }
            }
            else
            {
                <div class="preloader">
                    <i class="fa-solid fa-spinner fa-spin"></i>
                </div>
            }
        </div>
    }
    else
    {
        <div id="azure-prompt" class="prompt">
            <div id="azure-prompt-body" class="body">
                <h3>YOU ARE NOT CONNECTED TO AZURE IOT HUB!</h3>
                <p>Please visit the "Settings" page to connect to Azure IoT Hub</p>
            </div>
        </div>
    }

</div>

@code{
    private IEnumerable<IotDevice> Devices = [];
    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        isInitialized = viewModel.EnsureInitialized();

        if(isInitialized)
        {
            Devices = await viewModel.GetDevicesAsync();
            viewModel.Timer = new Timer(async _ => await SetDevicesAsync(), null, 0, viewModel.TimerInterval);
        }
        else
        {
            Devices = null!;
        }
    }

    private async Task SetDevicesAsync()
    {        
        Devices = await viewModel.GetDevicesAsync();
        await InvokeAsync(StateHasChanged);       
    }

    private void NavigateToDeviceDetails(string? deviceId)
    {
        viewModel.Timer!.Dispose();
        navigation.NavigateTo($"/devicedetails/{deviceId}", true);
    }
}
